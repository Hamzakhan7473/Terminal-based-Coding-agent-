#!/usr/bin/env python3
"""
Interactive Demo for the Terminal-based AI Coding Agent.

This script provides an interactive experience of the AI coding agent.
"""

import sys
import os
import time
from pathlib import Path

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))


def print_banner():
    """Print the interactive demo banner."""
    print("🤖 Terminal-based AI Coding Agent - INTERACTIVE DEMO")
    print("=" * 60)
    print("Welcome! This interactive demo simulates the AI coding agent.")
    print("You can try natural language commands and see how the agent responds.")
    print("Type 'exit' to quit, 'help' for available commands.")
    print("=" * 60)


def simulate_processing(message):
    """Simulate AI processing with a loading animation."""
    print(f"\n🤖 {message}")
    for i in range(3):
        print(".", end="", flush=True)
        time.sleep(0.5)
    print(" ✅")


def parse_user_input(user_input):
    """Parse user input and determine intent."""
    user_input_lower = user_input.lower()
    
    if "create" in user_input_lower or "make" in user_input_lower:
        return "create_file", 0.85, "python"
    elif "add" in user_input_lower or "edit" in user_input_lower:
        return "edit_file", 0.90, "python"
    elif "run" in user_input_lower or "execute" in user_input_lower:
        return "execute_code", 0.80, "python"
    elif "fix" in user_input_lower or "debug" in user_input_lower:
        return "debug_code", 0.75, "python"
    elif "test" in user_input_lower:
        return "test_code", 0.85, "python"
    elif "explain" in user_input_lower or "what" in user_input_lower:
        return "explain_code", 0.70, "python"
    elif "help" in user_input_lower:
        return "help", 1.0, None
    else:
        return "help", 0.50, None


def generate_sample_code(intent_type, user_input):
    """Generate sample code based on intent."""
    if intent_type == "create_file":
        if "quicksort" in user_input.lower():
            return '''def quicksort(arr):
    """
    Sort an array using the quicksort algorithm.
    
    Args:
        arr: List of comparable elements
        
    Returns:
        Sorted list
    """
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quicksort(left) + middle + quicksort(right)


if __name__ == "__main__":
    # Test the function
    test_array = [3, 6, 8, 10, 1, 2, 1]
    print("Original:", test_array)
    print("Sorted:", quicksort(test_array))'''
        elif "fibonacci" in user_input.lower():
            return '''def fibonacci(n):
    """
    Calculate the nth Fibonacci number.
    
    Args:
        n: Position in Fibonacci sequence
        
    Returns:
        Fibonacci number at position n
    """
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)


def fibonacci_sequence(count):
    """Generate a sequence of Fibonacci numbers."""
    return [fibonacci(i) for i in range(count)]


if __name__ == "__main__":
    print("First 10 Fibonacci numbers:", fibonacci_sequence(10))'''
        else:
            return '''def my_function():
    """
    A sample function created by the AI coding agent.
    """
    print("Hello from the AI coding agent!")
    return "Function executed successfully"


if __name__ == "__main__":
    result = my_function()
    print(result)'''
    
    elif intent_type == "edit_file":
        return '''# Added error handling and input validation
def safe_divide(a, b):
    """
    Safely divide two numbers with error handling.
    """
    try:
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b
    except (ValueError, TypeError) as e:
        print(f"Error: {e}")
        return None'''
    
    elif intent_type == "test_code":
        return '''import unittest

class TestQuicksort(unittest.TestCase):
    def test_empty_list(self):
        self.assertEqual(quicksort([]), [])
    
    def test_single_element(self):
        self.assertEqual(quicksort([1]), [1])
    
    def test_sorted_list(self):
        self.assertEqual(quicksort([1, 2, 3]), [1, 2, 3])
    
    def test_reverse_sorted(self):
        self.assertEqual(quicksort([3, 2, 1]), [1, 2, 3])
    
    def test_duplicates(self):
        self.assertEqual(quicksort([3, 1, 3, 2]), [1, 2, 3, 3])

if __name__ == "__main__":
    unittest.main()'''
    
    else:
        return "# Sample code generated by AI coding agent\nprint('Hello, World!')"


def simulate_execution(code):
    """Simulate code execution."""
    if "quicksort" in code.lower():
        return "Original: [3, 6, 8, 10, 1, 2, 1]\nSorted: [1, 1, 2, 3, 6, 8, 10]"
    elif "fibonacci" in code.lower():
        return "First 10 Fibonacci numbers: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
    elif "test" in code.lower():
        return "Running tests...\n.....\nRan 5 tests in 0.001s\n\nOK"
    else:
        return "Hello, World!"


def show_help():
    """Show available commands."""
    print("\n📋 Available Commands:")
    print("  • Create/Make [something] - Generate new code")
    print("  • Add/Edit [file] - Modify existing code")
    print("  • Run/Execute [code] - Run code in sandbox")
    print("  • Fix/Debug [issue] - Debug code problems")
    print("  • Test [code] - Generate test cases")
    print("  • Explain/What is [concept] - Explain code concepts")
    print("  • Help - Show this help message")
    print("  • Exit - Quit the demo")
    print("\n💡 Examples:")
    print("  • 'Create a Python function for quicksort'")
    print("  • 'Add error handling to my function'")
    print("  • 'Run the quicksort code'")
    print("  • 'Fix the bug in my sorting function'")


def main():
    """Main interactive demo function."""
    print_banner()
    
    session_count = 0
    
    while True:
        try:
            # Get user input
            user_input = input(f"\n[{session_count + 1}] You: ").strip()
            
            if not user_input:
                continue
                
            if user_input.lower() in ['exit', 'quit', 'bye']:
                print("\n👋 Thanks for trying the AI Coding Agent demo!")
                print("🔗 Full project: https://github.com/Hamzakhan7473/Terminal-based-Coding-agent-")
                break
            
            if user_input.lower() == 'help':
                show_help()
                continue
            
            # Parse intent
            simulate_processing("Parsing your intent...")
            intent_type, confidence, language = parse_user_input(user_input)
            
            print(f"\n📋 Parsed Intent:")
            print(f"   Type: {intent_type.replace('_', ' ').title()}")
            print(f"   Confidence: {confidence:.2f}")
            if language:
                print(f"   Language: {language.title()}")
            
            # Generate code if needed
            if intent_type in ["create_file", "edit_file", "test_code"]:
                simulate_processing("Generating code...")
                code = generate_sample_code(intent_type, user_input)
                
                print(f"\n💻 Generated Code:")
                print("-" * 30)
                print(code)
                print("-" * 30)
                
                # Simulate file operations
                filename = "generated_code.py"
                print(f"\n💾 File Operations:")
                print(f"   ✅ Created: {filename}")
                print(f"   ✅ Backup saved")
            
            # Execute code if requested
            elif intent_type == "execute_code":
                simulate_processing("Executing code in sandbox...")
                
                # Simulate execution
                print(f"\n🚀 Execution Results:")
                print(f"   ✅ Success: Yes")
                print(f"   ⏱️  Time: 0.05s")
                print(f"   📊 Memory: 2.1MB")
                
                print(f"\n📤 Output:")
                print("-" * 20)
                output = simulate_execution(user_input)
                print(output)
            
            # Debug code
            elif intent_type == "debug_code":
                simulate_processing("Analyzing code for issues...")
                print(f"\n🔍 Debug Analysis:")
                print(f"   ✅ Found potential issue: Index out of bounds")
                print(f"   💡 Suggested fix: Add bounds checking")
                print(f"   🔧 Applied fix automatically")
            
            # Explain code
            elif intent_type == "explain_code":
                simulate_processing("Analyzing code...")
                print(f"\n📚 Code Explanation:")
                if "quicksort" in user_input.lower():
                    print(f"   Quicksort is a divide-and-conquer sorting algorithm.")
                    print(f"   It works by selecting a pivot element and partitioning")
                    print(f"   the array around it, then recursively sorting subarrays.")
                else:
                    print(f"   This appears to be a general code explanation request.")
                    print(f"   The AI agent would analyze the specific code and")
                    print(f"   provide detailed explanations of its functionality.")
            
            else:
                simulate_processing("Processing your request...")
                print(f"\n🤔 I'm not sure how to help with that.")
                print(f"Try 'help' for available commands or be more specific.")
            
            session_count += 1
            
        except KeyboardInterrupt:
            print("\n\n👋 Demo interrupted. Goodbye!")
            break
        except Exception as e:
            print(f"\n❌ Error: {e}")
            continue


if __name__ == "__main__":
    main()



